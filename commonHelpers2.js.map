{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["let intervalId;\ndocument.addEventListener('DOMContentLoaded', () => {\n  const datetimePicker = initializeDatetimePicker();\n  const startButton = document.querySelector('[data-start]');\n  const timerDisplay = document.querySelector('.timer');\n\n  startButton.disabled = true;\n\n  startButton.addEventListener('click', () =>\n    handleStartButtonClick(datetimePicker, timerDisplay)\n  );\n});\n\nfunction initializeDatetimePicker() {\n  const startButton = document.querySelector('[data-start]');\n  const datetimePicker = flatpickr('#datetime-picker', {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n      const selectedDate = selectedDates[0];\n      if (selectedDate && selectedDate > new Date()) {\n        startButton.removeAttribute('disabled');\n      } else {\n        startButton.setAttribute('disabled', 'disabled');\n        iziToast.error({\n          title: 'Error',\n          message: 'Please choose a date in the future.',\n        });\n      }\n    },\n  });\n  return datetimePicker;\n}\n\nfunction handleStartButtonClick(datetimePicker, timerDisplay) {\n  const startButton = document.querySelector('[data-start]');\n  const selectedDate = datetimePicker.selectedDates[0];\n\n  if (selectedDate && selectedDate > new Date() && !intervalId) {\n    startButton.disabled = true;\n    datetimePicker._input.disabled = true;\n\n    intervalId = setInterval(() => {\n      const timeRemaining = selectedDate - new Date();\n\n      if (timeRemaining <= 0) {\n        clearInterval(intervalId);\n        updateTimerUI(timerDisplay, 0, 0, 0, 0);\n        iziToast.success({\n          title: 'Success',\n          message: 'Countdown completed!',\n        });\n        datetimePicker._input.disabled = false;\n        intervalId = undefined;\n      } else {\n        const { days, hours, minutes, seconds } = convertMs(timeRemaining);\n        updateTimerUI(timerDisplay, days, hours, minutes, seconds);\n      }\n    }, 1000);\n  }\n}\n\nfunction updateTimerUI(timerDisplay, days, hours, minutes, seconds) {\n  ['days', 'hours', 'minutes', 'seconds'].forEach(unit => {\n    timerDisplay.querySelector(`[data-${unit}]`).textContent = addLeadingZero(\n      eval(unit)\n    );\n  });\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["datetimePicker","startButton","timerDisplay","selectedDates","selectedDate","value"],"mappings":"uGAAA,IAAI,WACJ,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,MAAMA,EAAiB,2BACjBC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAe,SAAS,cAAc,QAAQ,EAEpDD,EAAY,SAAW,GAEvBA,EAAY,iBAAiB,QAAS,IACpC,uBAAuBD,EAAgBE,CAAY,CACvD,CACA,CAAC,EAED,SAAS,0BAA2B,CAClC,MAAMD,EAAc,SAAS,cAAc,cAAc,EAmBzD,OAlBuB,UAAU,mBAAoB,CACnD,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQE,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgBA,EAAe,IAAI,KACrCH,EAAY,gBAAgB,UAAU,GAEtCA,EAAY,aAAa,WAAY,UAAU,EAC/C,SAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACnB,CAAS,EAEJ,CACL,CAAG,CAEH,CAEA,SAAS,uBAAuBD,EAAgBE,EAAc,CAC5D,MAAMD,EAAc,SAAS,cAAc,cAAc,EACnDG,EAAeJ,EAAe,cAAc,CAAC,EAE/CI,GAAgBA,EAAe,IAAI,MAAU,CAAC,aAChDH,EAAY,SAAW,GACvBD,EAAe,OAAO,SAAW,GAEjC,WAAa,YAAY,IAAM,CACPI,EAAe,IAAI,MAEpB,GACnB,cAAc,UAAU,EACxB,cAAcF,CAAwB,EACtC,SAAS,QAAQ,CACf,MAAO,UACP,QAAS,sBACnB,CAAS,EACDF,EAAe,OAAO,SAAW,GACjC,WAAa,QAGb,cAAcE,CAA2C,CAE5D,EAAE,GAAI,EAEX,CAEA,SAAS,cAAc,aAAc,KAAM,MAAO,QAAS,QAAS,CAClE,CAAC,OAAQ,QAAS,UAAW,SAAS,EAAE,QAAQ,MAAQ,CACtD,aAAa,cAAc,SAAS,IAAI,GAAG,EAAE,YAAc,eACzD,KAAK,IAAI,CACf,CACA,CAAG,CACH,CAEA,SAAS,eAAeG,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC"}